package fr.inria.diverse.query;
import fr.inria.diverse.*;
import fr.inria.diverse.model.*;
import fr.inria.diverse.tools.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.softwareheritage.graph.SwhType;
import org.softwareheritage.graph.SwhUnidirectionalGraph;
import java.io.IOException;
import java.util.stream.Collectors;
import java.util.*;

public class GraphQuery implements IGraphQuery{
    static Logger logger = LogManager.getLogger(GraphQuery.class);
    static String id = "testQuery";
    private Graph g;		    

    public GraphQuery() throws IOException {
        g = new Graph();
        g.init();
    }
		
	public Set<Long> runQuery() throws IOException, InterruptedException {
		Set<Long> results = new HashSet<>();
		logger.info("------Executing query "+id+"------");
		List<Long> selectResult = new LambdaExplorer<Long, Long>(g, this.g.getOrigins(),id) {
		    @Override
			public void exploreGraphNodeActionOnElement(Long currentElement, SwhUnidirectionalGraph graphCopy) {
			    Origin o = new Origin(currentElement, this.graph);
			    boolean predicateResult = o.getOriginVisits().stream().anyMatch(originVisit ->
			    	originVisit.getSnapshot().getBranches().stream().anyMatch(b ->
			    		b.getRevision().getCommiter().equals("bla")
			    	)
			    );
			    if (predicateResult) {
			    	result.add(currentElement);
			    }
			}
		}.explore();
		results.addAll(selectResult);
		return results;			    
	}
}
